/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hw1;
import java.util.Scanner;

/**
 *
 * @author user
 */
public class ArithmeticCalculator {
    String str;
    Node root;  
    StringBuilder strEpithematik;
    String strEpithem;
    double result;
    String strtoDot;
    StringBuilder strBuildertoDot;
    
    public static void main(String[] args) {
        String readStr;
        String prints;
        ArithmeticCalculator firstObject;
        String Epithematiki;
        int i; 

        Scanner sc = new Scanner(System.in);
        System.out.print("Expression: ");
        readStr = sc.nextLine();

        firstObject = new ArithmeticCalculator(readStr);
        if(sc.hasNextLine()){
            prints = sc.nextLine();

            StringBuilder printsBuilder = new StringBuilder(prints);
            for(i = 0; i < printsBuilder.length(); i++){
                if(printsBuilder.charAt(i) == ' '){
                    printsBuilder.delete(i, i+1);
                    i--;
                }
            }
            prints = printsBuilder.toString();

            for(i = 0; i < prints.length(); i++){
                if(prints.charAt(i) == 'd'){
                    System.out.println(firstObject.toDotString());
                }
                if(prints.charAt(i) == 's'){
                    Epithematiki = firstObject.toString();
                    System.out.println("Postfix: " +Epithematiki);

                }
                if(prints.charAt(i) == 'c'){
                    firstObject.calculate();
                    System.out.println("Result: " + firstObject.root.result);
                }
            }
        }
        
   }
    
     public ArithmeticCalculator(String str){
        int i;
        int j;
        int k;
        int n = 0;
        int h = 0;
        String chars2 = "+-^*x/";
        String chars3 = "+-^\n(*)x/ ";
        int first = 0;
        String operationStr;
        int intNoParenthesis = 0;
        int numofTimes = 0;
        String operation;
        int returnValue;
        
        this.str = str;
        str = DeleteBlanks();
        Controls();
        
        for(i = 0; i < str.length(); i++){
            if(str.charAt(i) == '\\' ){
                intNoParenthesis = 0;
                first = 0;
                if(chars2.indexOf(str.charAt(i + 1)) == -1){
                    System.out.println("[ERROR] Invalid expansion expression\n");
                    System.exit(0);
                }
                if(Character.isDigit(str.charAt(i + 2))){
                    if((str.charAt(i + 2) == '1') && (!Character.isDigit(str.charAt(i+3)))){
                        System.out.println("[ERROR] Invalid expansion expression\n");
                        System.exit(0);
                    }
                    j = i + 2;
                    while((chars3.indexOf(str.charAt(j)) == -1)){
                        if(str.charAt(j) == '.'){
                            System.out.println("[ERROR] Invalid expansion expression\n");
                            System.exit(0);
                        }
                        j++;
                        if(j == (str.length() - 1)){
                            break;
                        }
                    }
                }
              
                k = i - 1;
                int indexClose = 0;
                int indexOpen = 0;
                
                while(true){
                    if(str.charAt(k) == ')'){
                        indexClose++;
                    }
                    if(str.charAt(k) == '('){
                        indexOpen++;
                    }
                    if(((indexClose == indexOpen) && (indexClose > 0)) || ((indexClose == indexOpen) && (indexOpen == 0) && (Character.isDigit(str.charAt(k))))){
                        break;
                    }
                    k--;
                }

               
                h = i - 1;
                while(true){
                    if(str.charAt(h) != ' '){
                        break;
                    }
                    h--;
                }


                if((indexClose == indexOpen) && (indexOpen == 0) && (Character.isDigit(str.charAt(k)))){
                    n = h;
                    while((n > 0) && (Character.isDigit(str.charAt(n)))){
                        n--;
                    }
                    intNoParenthesis = 1;
                    operationStr = str.substring(n, h + 1);
                }
                else{
                    operationStr = str.substring(k, h + 1);
                }

                operation = new StringBuilder().append(" ").append(str.charAt(i + 1)).toString();

                
                if((i + 3) == str.length()){
                    double aDouble = (double) Character.digit(str.charAt(i + 2), 10);
                    numofTimes = (int) aDouble;
                }
                else if((Character.isDigit(str.charAt(i + 3)))){
                    int thesi = i + 3;
                    while(thesi < str.length()){
                      if(Character.isDigit(str.charAt(thesi))){
                          thesi++;
                      }
                      else{
                          break;
                      }

                    }
                    String aNewString = str.substring((i + 2), thesi);
                    System.out.println(aNewString);
                    double aDouble = Double.parseDouble(aNewString);
                    numofTimes = (int) aDouble;
                }
                else{
                    double aDouble = (double) Character.digit(str.charAt(i + 2), 10);
                    numofTimes = (int) aDouble;
                }

                StringBuilder finalOperationStr = new StringBuilder(0);
                while(numofTimes > 0){
                    if(first == 1){
                        finalOperationStr.insert(finalOperationStr.length(), operation);
                    }
                    finalOperationStr.insert(finalOperationStr.length(), operationStr);
                    first = 1;
                    numofTimes--;
                }
                
                finalOperationStr.insert(0, '(');
                finalOperationStr.insert(finalOperationStr.length(), ')');
                
               
                if((k > 0) && (intNoParenthesis == 0)){
                    finalOperationStr.insert(0, str.substring(0, k) );
                }
                if((intNoParenthesis == 1) && (n > 0)){
                    finalOperationStr.insert(0, str.substring(0, n) );
                }
                if(i+3 <= str.length()){
                    finalOperationStr.insert(finalOperationStr.length(), str.substring(i+3, str.length()) );
                }
                
                str = finalOperationStr.toString();
            }
        }
        
        Controls();
        root = new Node();
        Recursion(str, root, 0, 1);
       
    }
    
    public String toDotString(){  
        //strBuildertoDot = new StringBuilder(strtoDot);
        
        strtoDot =  "graph ArithmeticExpressionTree {\n";
        
        printPreorder(root);
            
        strtoDot += "}";
        
        return(strtoDot);

    }   
    
     void printPreorder(Node node){
        if (node == null) 
            return; 
        
        strtoDot += String.format("    " + "%d [label=\" %s" + "\"]\n", node.hashCode(), node.key);
        
        if(node.left != null){
            strtoDot += String.format("    " + "%d -- %d\n", node.left.hashCode(), node.left.hashCode());
        }
        printPreorder(node.left); 
        
        if(node.left != null){
            strtoDot += String.format("    " + "%d -- %d\n", node.right.hashCode(), node.right.hashCode());
        }
        printPreorder(node.right); 
    }
     
    
    public String toString(){
        strEpithem = " " ;
        String chars = "+-/*^x";
        int i;
        int j;
        int leftParenthesis = 0;
        int rightParenthesis = 0;
        int count = 0;
        double result;
         
        strEpithematik = new StringBuilder(strEpithem);
        
        postOrder(root, root);
        
       
        for(i = 0; i < strEpithematik.length(); i++){
            if(chars.indexOf(strEpithematik.charAt(i)) != -1){
                strEpithematik.insert(i+1, ")");
                for(j = i-1; j < strEpithematik.length(); j--){
                    if(strEpithematik.charAt(j) == ')'){
                        leftParenthesis++;
                    }
                    if(strEpithematik.charAt(j) == '('){
                        rightParenthesis++;
                    }
                    if(leftParenthesis == rightParenthesis){
                        count++;
                        if(count == 2){
                            strEpithematik.insert(j, "(");
                            count = 0;
                            break;
                        }
                    }
                }
                i++;
                continue;
            }
            
        }

        strEpithematik.delete(0, 1);
        strEpithematik.delete(0, 1);
        strEpithematik.delete(strEpithematik.length()-1, strEpithematik.length());
        strEpithem = strEpithematik.toString(); 
        
        return(strEpithem);
    }
    
   
    void postOrder(Node node, Node parentNode){
        String chars = "+-/*^x";
        if (node == null) 
            return; 
  
        postOrder(node.left, node); 
  
        postOrder(node.right, node); 
        
        if(chars.indexOf(node.key) != -1){
            strEpithematik.insert(strEpithematik.length(), node.key);
        }
        else{
            strEpithematik.insert(strEpithematik.length(), "(");
            strEpithematik.insert(strEpithematik.length(), node.key);
            strEpithematik.insert(strEpithematik.length(), ")");
        }
    }  
    
  
   double calculate(){
        postOrderCalculate(root);

        return(result);
    }
    
     void postOrderCalculate (Node node){
         double leftOper = 0;
         double rightOper = 0;
         if(node == null){
             return;
         }
         postOrderCalculate(node.left);
         postOrderCalculate(node.right);
         
         if(!Character.isDigit(node.key.charAt(0))){
            node.operation = 1;
            
            if(node.left.operation == 1){
                leftOper = node.left.result;
            }
            else{
                leftOper = Double.parseDouble(node.left.key);
            }
            
            if(node.right.operation == 1){
                rightOper = node.right.result;
            }
            else{
                rightOper = Double.parseDouble(node.right.key);
            }
             if(node.key.charAt(0) == '+'){
                 node.result = leftOper + rightOper;
             }
             if(node.key.charAt(0) == '-'){
                 node.result = leftOper - rightOper;
             }
             if(node.key.charAt(0) == '*'){
                 node.result = leftOper * rightOper;
             }
             if(node.key.charAt(0) == '/'){
                 node.result = leftOper / rightOper;
             }
             if(node.key.charAt(0) == 'x'){
                 node.result = leftOper * rightOper;
             }
             if(node.key.charAt(0) == '^'){
                 node.result = Math.pow(leftOper, rightOper);
             } 
         }
         
  
    }
    
 
    public void Recursion(String str, Node komvos, int left, int first){
        int index = 0;
        int i;
        int k;
        int n = 0;
        int l;
        int positionOfLastOperation = 0;
        int firstNo = 0;
        StringBuilder stringMinusOneParenthesis;
        int breakCounter = 0;
        String chars = "+-*/x^";
        int returnValue = 0;
        Node node = komvos;
       
        for(i = 0; i < str.length(); i++){
            if(chars.indexOf(str.charAt(i)) != -1){
                break;
            }
            else if(i == (str.length() - 1)){
                if(left == 1){
                    node.key = str;
                }
                else{
                    node.key = str;
                }
                
                return;
            }
        }
        
        do{    
            if(firstNo == 1){
                stringMinusOneParenthesis = new StringBuilder(0); 
                for(k = 0; k < str.length(); k++){
                    if(str.charAt(k) == '('){
                        break;
                    }
                }
                for(n = (str.length() - 1); n > 0; n--){
                    if(str.charAt(n) == ')'){
                        break;
                    }
                }
               
                stringMinusOneParenthesis.insert(0, str.substring(k+1, n) );
                str = stringMinusOneParenthesis.toString();
            }
            for(i = str.length(); i > 0; i--){
                if((str.charAt(i - 1) == ')') || (index > 0)){
                    if(str.charAt(i - 1) == ')'){
                        index++;
                    }
                    else if(str.charAt(i - 1) == '('){
                        index--;
                    }
                    continue;
                }
                if((str.charAt(i - 1) == '+') || (str.charAt(i - 1) == '-')){
                    positionOfLastOperation = i-1;
                    breakCounter = 1;
                    break;
                }
            }
            if(breakCounter == 1){
                break;
            }
            index = 0;
            for(i = str.length(); i > 0; i--){
                if((str.charAt(i - 1) == ')') || (index > 0)){
                    if(str.charAt(i - 1) == ')'){
                        index++;
                    }
                    else if(str.charAt(i - 1) == '('){
                        index--;
                    }
                    continue;
                }
                if((str.charAt(i - 1) == ')') || (index == 1)){
                    index = 1;
                    continue;
                }
               if((str.charAt(i - 1) == '*') || (str.charAt(i - 1) == '/') || (str.charAt(i - 1) == 'x')){
                    positionOfLastOperation = i-1;
                    breakCounter = 1;
                    break;
                }
            }
            if(breakCounter == 1){
                break;
            }
            index = 0;
            for(i = str.length(); i > 0; i--){
                if((str.charAt(i - 1) == ')') || (index > 0)){
                    if(str.charAt(i - 1) == ')'){
                        index++;
                    }
                    else if(str.charAt(i - 1) == '('){
                        index--;
                    }
                    continue;
                }
                if((str.charAt(i - 1) == ')') || (index == 1)){
                    index = 1;
                    continue;
                }
               if(str.charAt(i - 1) == '^'){
                    positionOfLastOperation = i-1;
                    break ;
                }
            }
            firstNo = 1;
        }
        while(positionOfLastOperation == 0);
        
        node.key = String.valueOf(str.charAt(positionOfLastOperation));
        node.left = new Node();
        node.right = new Node();
        
        Recursion(str.substring(0, positionOfLastOperation), node.left, 1, 0);
            
        Recursion(str.substring(positionOfLastOperation + 1, str.length()), node.right, 0, 0);
                
        return;
}
       
    
    String DeleteBlanks(){
        int i;
        StringBuilder strBuilder = new StringBuilder(str);
        
        for(i = 0; i < strBuilder.length(); i++){
            if(strBuilder.charAt(i) == ' '){
                strBuilder.delete(i, i+1);
                i--;
            }
        }
        str = strBuilder.toString();
        return(str);  
    }
    
    void Controls(){
        int i;
        int j;
        int numberLeft = 0;//(
        int numberRight = 0;//)
        String chars = "\n+-(^*x)/ .\\";
        String chars2 = "+-^*x/";
        
        for(i = 0; i < str.length(); i++){
            if(chars2.indexOf(str.charAt(i)) != -1){
                if(chars2.indexOf(str.charAt(i + 1)) != -1){
                    System.out.println("[ERROR] Two consecutive operands\n");
                    System.exit(0);
                }
            }
        }
        
        for(i = 0; i < str.length(); i++){
            if(str.charAt(i) == '(' ){
                numberLeft++;
                j = i + 1;
                if((chars2.indexOf(str.charAt(j))) != -1){
                    System.out.println("[ERROR] Operand appears after opening parenthesis\n");
                    System.exit(0);
                }
            }
            if(str.charAt(i) == ')' ){
                numberRight++;
                j = i - 1;
                if((chars2.indexOf(str.charAt(j))) != -1){
                    System.out.println("[ERROR] Operand appears before closing parenthesis\n");
                    System.exit(0);
                }
            }
        }
        if(numberRight > numberLeft){
            System.out.println("[ERROR] Closing unopened parenthesis\n");
            System.exit(0);
        }
        if(numberRight < numberLeft){
            System.out.println("[ERROR] Not closing opened parenthesis\n");
            System.exit(0);
        }
        
       
        for(i = 0; i < str.length(); i++){
            if(((!Character.isDigit(str.charAt(i))) && (chars.indexOf(str.charAt(i)) == -1))){
                System.out.println("[ERROR] Invalid character\n");
                System.exit(0);
            }
        }       
        
    }
}
    
class Node {
    String key;
    Node left, right;
    double result;
    int operation;
 
    public Node(){
        left = right = null;
        this.key = key;
        result = -1;
        operation = 0;
    }

}
